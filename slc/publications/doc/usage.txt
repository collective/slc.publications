Overview
========

by Syslab.com GmbH <info@syslab.com>

The Publication Product can be used to organise printed publications that are
available online for download. Publications usually have a publication date,
order and ISBN numbers, an author and exist in several language versions.
Once stored in the Publication Product, they can be displayed using
autogenerated overviews. Support is built in for easy upload and parsing of
metadata.

Note: You can run the tests in this file by typing

    zopectl test -m Products.Publications

Required Products
=================

- Plone 3 (note that version 1.0 is not tested on Plone 2.5)

- Linguaplone 2.0

Optional Products
=================

If you want support for autogeneration of cover images, you need to install

- pdftk

- convert from the imagemagick toolkit

- ghostscript gs

Use a Publication Folder to group Publications
==============================================

We use a publication folder to keep similar publications grouped together.
It provides a template called publication_listing which shows all contained
publications with image and quicklinks to download the language versions. It
also contains a customized content type registry. If you upload files and
folders using an upload facility like ftp or FlashUpload, your folders will be
turned into publication objects and your files into PublicationFiles.
So first we will add a publication folder, then we will add a publication
inside it and afterwards we will add the real files as publiication files into
the publication object.

    >>> self.portal.portal_languages.addSupportedLanguage('en')
    >>> self.portal.portal_languages.addSupportedLanguage('de')
    >>> self.portal.portal_languages.getSupportedLanguages()
    ['en', 'de']

    >>> _ = self.folder.invokeFactory('PublicationFolder', 'pubfolder')
    >>> PFolder = self.folder.pubfolder
    >>> PFolder.setTitle("My Publication Folder")
    >>> PFolder.Title()
    'My Publication Folder'

    >>> 'content_type_registry' in PFolder.objectIds()
    True

    >>> _ = PFolder.invokeFactory('Publication', 'pub')
    >>> Publication = PFolder.pub
    >>> _ = Publication.invokeFactory('PublicationFile', 'pubfile')
    >>> PFile = Publication.pubfile
    >>> PFile.Language()
    u'en'
    >>> from Products.ATContentTypes.tests.utils import dcEdit
    >>> dcEdit(PFile) # Language is currently on "de"
    >>> PFile.Language()
    u'de'

Now we load a demonstration pdf file from doc/UsingthePublicationProduct.pdf which has the following metadata set within the pdf file:
- Title: Using the Publication Product
- Description: The Publication Product can be used ...
- Keywords: documentation, tutorial
- Language: en

Once we parse the uploaded file, we will have these properties set on our zope object.

    >>> self.loadDocumentation()
    >>> PFile.setFile(self.docpdf)
    >>> PFile.parsePDFProperties()
    >>> PFile.Language()
    u'en'

    >>> PFile.Subject()
    ('documentation', 'tutorial')

    >>> PFile.Title()
    'Using the Publication Product \xe2\x80\x94 Portal'

    >>> PFile.Description()
    'The Publication Product can be used to organise printed publications that are available online for download. Publications usually have a publication date, order and ISBN numbers, an author and exist in several language versions. Once stored in the Publication Product, they can be displayed using autogenerated overviews. Support is built in for easy upload and parsing of metadata.'

Sometimes the PDF files will not come with proper metadata set on them. In this case, we will set them through the web but we can have at least the language parsed. If one uploads several pdf files in different languages, the language code is often contained in the filename either as "EN_myfile.pdf" or as "myfile_EN.pdf". Parsing the PDF file will try to guess this extension if there is no Language metadata set. To demonstrate this, we will load the file 'tests/data/GermanOSHA_de.pdf'

    >>> _ = Publication.invokeFactory('PublicationFile', 'anotherpubfile')
    >>> AnotherPFile = Publication.anotherpubfile
    >>> AnotherPFile.Language()
    u'en'

    >>> self.loadGermanFile_de()
    >>> AnotherPFile.setFile(self.german_de_pdf)
    >>> AnotherPFile.parsePDFProperties()
    >>> AnotherPFile.Language()
    u'de'


If you cannot set your metadata on your pdf files directly but want to use an automated way of uploading them, you can use an ini style config file to specify and upload them. You can find an example in the directory tests/data/metadata.ini.
Such metadata files are uploaded for a Publication object and will try to set metadata for the Publication and its Publication Files, depending on the ini sections in the file. The default section will be applied to the Publication while sections with language abbreviations will be set on the matching language version PublicationFile.

    >>> _ = Publication.invokeFactory('PublicationFile', 'metadatapubfile')
    >>> MetadataPFile = Publication.metadatapubfile
    >>> MetadataPFile.Language()
    u'en'

    >>> self.loadMetadataini()
    >>> MetadataPFile.Language()
    u'en'

    >>> Publication.getField('metadataUpload').set(Publication, self.metadataini)
    >>> Publication.parseMetadataUpload()

    >>> Publication.Title()
    'Memorandum of Understanding'

    >>> ENFile = Publication.getPublicationFile('en', fallback=0)
    >>> DEFile = Publication.getPublicationFile('de', fallback=0)

    >>> ENFile.Title()
    'Memorandum of Understanding'

    >>> DEFile.Title()
    'Vereinbarung'

    >>> ENFile.getISBN_number()
    '87-418-5901-5'

    >>> DEFile.getISBN_number()
    '87-418-5901-6'

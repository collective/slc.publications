Overview
========

The Publication Product can be used to organise printed publications that are
available online for download. Publications usually have a publication date,
order and ISBN numbers, an author and exist in several language versions.
Once stored in the Publication Product, they can be displayed using
autogenerated overviews. 

Note: You can run the tests in this file by typing

    zopectl test -m slc.publications

Required Products
=================

- Plone 3 (note that version 1.0 is not - yet - tested on Plone 2.5)

- Linguaplone 2.0

- AdvancedQuery (if you use Plone2.5)

- p4a.subtyper

- p4a.fileimage

Optional Products
=================

If you want support for autogeneration of cover images, you need to install

    - pyxml
    
    - pdftk
    
    - convert from the imagemagick toolkit
    
    - ghostscript gs


Adding Publications
===================

    >>> self.loginAsPortalOwner()

We will add publications with LinguaPlone support, so we need to setup some languages:

    >>> portal_languages = self.portal.portal_languages
    >>> portal_languages.addSupportedLanguage('en')
    >>> portal_languages.addSupportedLanguage('de')
    >>> portal_languages.getSupportedLanguages()
    ['en', 'de']
    
It depends on your portal settings whether a new object is language neutral or gets the 
default language. 

    >>> default_language = portal_languages.start_neutral and '' or portal_languages.getDefaultLanguage()

Publications are File objects. What makes them Publications are certain 
additional metadata which characterise the File closer. By enhancing the 
default File object, we stay updatable using the core Plone mechanisms and 
do not introduce yet another content type.

    >>> _ = self.folder.invokeFactory('File', 'mypub')
    >>> mypub = self.folder.mypub
    >>> mypub.Language() == default_language
    True
    >>> mypub.setTitle('My english File')
    >>> mypub.setDescription('My english File description')
    >>> mypub.Title()
    'My english File'
    >>> mypub.Language()
    'en'
    
Now we use subtyping to make this file a publication.

    >>> from p4a.subtyper.interfaces import ISubtyper
    >>> from zope.component import getUtility
    >>> subtyper = getUtility(ISubtyper)
    >>> possible_types = [x.name for x in subtyper.possible_types(mypub)]
    >>> 'slc.publications.Publication' in possible_types
    True
    >>> subtyper.existing_type(mypub) is None
    True    
    >>> subtyper.change_type(mypub, 'slc.publications.Publication')
    >>> subtyper.existing_type(mypub).name
    'slc.publications.Publication'
    
    

Now we load a demonstration pdf file from doc/UsingthePublicationProduct.pdf which has the following metadata set within the pdf file:

    - Title: Using the Publication Product
    - Description: The Publication Product can be used ...
    - Keywords: documentation, tutorial
    - Language: en

    >>> docpdf = self.loadfile('doc/UsingthePublicationProduct.pdf')
    >>> mypub.setFile(docpdf)

Once we parse the uploaded file, we will have these properties set on our zope object.

    >>> from slc.publications.pdf.interfaces import IPDFParser
    >>> IPDFParser(mypub).parse(docpdf)
    >>> mypub.Subject()
    ('documentation', 'tutorial')
    >>> mypub.Title()
    'Using the Publication Product \xe2\x80\x94 Portal'
    >>> mypub.Description()
    'The Publication Product can be used to organise printed publications that are available online for download. Publications usually have a publication date, order and ISBN numbers, an author and exist in several language versions. Once stored in the Publication Product, they can be displayed using autogenerated overviews. Support is built in for easy upload and parsing of metadata.'


Sometimes the PDF files will not come with proper metadata set on them. In this case, we will set them through the web but we can have at least the language parsed. If one uploads several pdf files in different languages, the language code is often contained in the filename either as "EN_myfile.pdf" or as "myfile_EN.pdf". Parsing the PDF file will try to guess this extension if there is no Language metadata set. To demonstrate this, we will load the file 'tests/data/GermanOSHA_de.pdf'

    >>> _ = self.folder.invokeFactory('File', 'anotherpubfile')
    >>> AnotherFile = self.folder.anotherpubfile
    >>> AnotherFile.Language()
    'en'

    >>> german_de_pdf = self.loadfile('tests/data/GermanOSHA_de.pdf')
    >>> AnotherFile.setFile(german_de_pdf)
    >>> IPublication(AnotherFile).parsePDFProperties()
    >>> AnotherFile.Language()
    'de'


There is a template called publication_listing which shows all contained
publications or the results of a topic with image and quicklinks to download 
the language versions. 

You can customize your content type registry so that pdf files are automatically 
added as pdf files. 


Uploading Metadata
==================

If you cannot set your metadata on your pdf files directly but want to use an automated way of uploading them, you can use an ini style config file to specify and upload them. You can find an example in the directory tests/data/metadata.ini.
Such metadata files are uploaded for a Publication object and will try to set metadata for the Publication and its Translations, depending on the ini sections in the file. 

    >>> _ = self.folder.invokeFactory('File', 'metadatapub')
    >>> MetadataPub = self.folder.metadatapub
    >>> MetadataPub.setFile(docpdf)
    >>> MetadataPub.parsePDFProperties()
    >>> MetadataPub.Language()
    'en'

We now have an english document (and reused the english pdf file loaded already above).
We add a translation for this.

    >>> MetadataPub.addTranslation('de')
    >>> MetadataPub_de = MetadataPub.getTranslation('de')
    >>> MetadataPub_de.setFile(german_de_pdf)
    >>> MetadataPub_de.parsePDFProperties()
    >>> MetadataPub_de.Language()
    'de'

Now we have two language versions. We upload the metadata file to the main version, and now
the properties on both versions should be set.

    >>> metadataini = self.loadMetadataini()
    >>> MetadataPub.getField('metadataUpload').set(MetadataPub, metadataini)
    >>> MetadataPub.parseMetadataUpload()
    >>> MetadataPub.Title()
    'Memorandum of Understanding'

    >>> ENFile = MetadataPub.getTranslation('en')
    >>> DEFile = MetadataPub.getTranslation('de')
    >>> ENFile.Title()
    'Memorandum of Understanding'

    >>> DEFile.Title()
    'Vereinbarung'

    >>> 
    >>> IPublication(ENFile).getISBN_number()
    '87-418-5901-5'

    >>> IPublication(DEFile).getISBN_number()
    '87-418-5901-6'



